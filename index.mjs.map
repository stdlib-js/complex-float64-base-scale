{"version":3,"file":"index.mjs","sources":["../lib/main.js","../lib/assign.js","../lib/strided.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Complex128 from '@stdlib/complex-float64-ctor';\nimport real from '@stdlib/complex-float64-real';\nimport imag from '@stdlib/complex-float64-imag';\n\n\n// MAIN //\n\n/**\n* Scales a double-precision complex floating-point number by a real-valued double-precision floating-point scalar constant.\n*\n* @param {number} alpha - scalar constant\n* @param {Complex128} z - complex number\n* @returns {Complex128} result\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64-ctor';\n*\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var out = scale( 5.0, z );\n* // returns <Complex128>[ 25.0, 15.0 ]\n*/\nfunction scale( alpha, z ) {\n\treturn new Complex128( real( z ) * alpha, imag( z ) * alpha );\n}\n\n\n// EXPORTS //\n\nexport default scale;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Scales a double-precision complex floating-point number by a real-valued double-precision floating-point scalar constant and assigns results to a provided output array.\n*\n* @param {number} alpha - scalar constant\n* @param {number} re - real component of the complex number\n* @param {number} im - imaginary component of the complex number\n* @param {Collection} out - output array\n* @param {integer} strideOut - stride length\n* @param {NonNegativeInteger} offsetOut - starting index\n* @returns {Collection} output array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var out = assign( 5.0, 5.0, 3.0, new Float64Array( 2 ), 1, 0 );\n* // returns <Float64Array>[ 25.0, 15.0 ]\n*/\nfunction assign( alpha, re, im, out, strideOut, offsetOut ) {\n\tout[ offsetOut ] = re * alpha;\n\tout[ offsetOut+strideOut ] = im * alpha;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default assign;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Scales a double-precision complex floating-point number stored in a real-valued strided array view by a real-valued double-precision floating-point scalar constant and assigns results to a provided strided output array.\n*\n* @param {number} alpha - scalar constant\n* @param {Float64Array} z - complex number view\n* @param {integer} strideZ - stride length for `z`\n* @param {NonNegativeInteger} offsetZ - starting index for `z`\n* @param {Collection} out - output array\n* @param {integer} strideOut - stride length for `out`\n* @param {NonNegativeInteger} offsetOut - starting index for `out`\n* @returns {Collection} output array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var z = new Float64Array( [ 5.0, 3.0 ] );\n*\n* var out = strided( 5.0, z, 1, 0, new Float64Array( 2 ), 1, 0 );\n* // returns <Float64Array>[ 25.0, 15.0 ]\n*/\nfunction strided( alpha, z, strideZ, offsetZ, out, strideOut, offsetOut ) {\n\tout[ offsetOut ] = alpha * z[ offsetZ ];\n\tout[ offsetOut+strideOut ] = alpha * z[ offsetZ+strideZ ];\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default strided;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Scale a double-precision complex floating-point number by a real-valued double-precision floating-point scalar constant.\n*\n* @module @stdlib/complex-float64-base-scale\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64-ctor';\n* import scale from '@stdlib/complex-float64-base-scale';\n*\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var out = scale( 5.0, z );\n* // returns <Complex128>[ 25.0, 15.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\nimport strided from './strided.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\nsetReadOnly( main, 'strided', strided );\n\n\n// EXPORTS //\n\nexport default main;\n\n// exports: { \"assign\": \"main.assign\", \"strided\": \"main.strided\" }\n"],"names":["scale","alpha","z","Complex128","real","imag","assign","re","im","out","strideOut","offsetOut","strided","strideZ","offsetZ","setReadOnly","main"],"mappings":";;qZA4CA,SAASA,EAAOC,EAAOC,GACtB,OAAO,IAAIC,EAAYC,EAAMF,GAAMD,EAAOI,EAAMH,GAAMD,EACvD,CCPA,SAASK,EAAQL,EAAOM,EAAIC,EAAIC,EAAKC,EAAWC,GAG/C,OAFAF,EAAKE,GAAcJ,EAAKN,EACxBQ,EAAKE,EAAUD,GAAcF,EAAKP,EAC3BQ,CACR,CCDA,SAASG,EAASX,EAAOC,EAAGW,EAASC,EAASL,EAAKC,EAAWC,GAG7D,OAFAF,EAAKE,GAAcV,EAAQC,EAAGY,GAC9BL,EAAKE,EAAUD,GAAcT,EAAQC,EAAGY,EAAQD,GACzCJ,CACR,CCDAM,EAAAC,EAAA,SAAAV,GACAS,EAAAC,EAAA,UAAAJ"}