{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/assign.js", "../lib/strided.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Complex128 = require( '@stdlib/complex-float64-ctor' );\nvar real = require( '@stdlib/complex-float64-real' );\nvar imag = require( '@stdlib/complex-float64-imag' );\n\n\n// MAIN //\n\n/**\n* Scales a double-precision complex floating-point number by a real-valued double-precision floating-point scalar constant.\n*\n* @param {number} alpha - scalar constant\n* @param {Complex128} z - complex number\n* @returns {Complex128} result\n*\n* @example\n* var Complex128 = require( '@stdlib/complex-float64-ctor' );\n* var real = require( '@stdlib/complex-float64-real' );\n* var imag = require( '@stdlib/complex-float64-imag' );\n*\n* var z = new Complex128( 5.0, 3.0 );\n* // returns <Complex128>\n*\n* var out = scale( 5.0, z );\n* // returns <Complex128>\n*\n* var re = real( out );\n* // returns 25.0\n*\n* var im = imag( out );\n* // returns 15.0\n*/\nfunction scale( alpha, z ) {\n\treturn new Complex128( real( z ) * alpha, imag( z ) * alpha );\n}\n\n\n// EXPORTS //\n\nmodule.exports = scale;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Scales a double-precision complex floating-point number by a real-valued double-precision floating-point scalar constant and assigns results to a provided output array.\n*\n* @param {number} alpha - scalar constant\n* @param {number} re - real component of the complex number\n* @param {number} im - imaginary component of the complex number\n* @param {Collection} out - output array\n* @param {integer} strideOut - stride length\n* @param {NonNegativeInteger} offsetOut - starting index\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var out = assign( 5.0, 5.0, 3.0, new Float64Array( 2 ), 1, 0 );\n* // returns <Float64Array>[ 25.0, 15.0 ]\n*/\nfunction assign( alpha, re, im, out, strideOut, offsetOut ) {\n\tout[ offsetOut ] = re * alpha;\n\tout[ offsetOut+strideOut ] = im * alpha;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = assign;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Scales a double-precision complex floating-point number stored in a real-valued strided array view by a real-valued double-precision floating-point scalar constant and assigns results to a provided strided output array.\n*\n* @param {number} alpha - scalar constant\n* @param {Float64Array} z - complex number view\n* @param {integer} strideZ - stride length for `z`\n* @param {NonNegativeInteger} offsetZ - starting index for `z`\n* @param {Collection} out - output array\n* @param {integer} strideOut - stride length for `out`\n* @param {NonNegativeInteger} offsetOut - starting index for `out`\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var z = new Float64Array( [ 5.0, 3.0 ] );\n*\n* var out = strided( 5.0, z, 1, 0, new Float64Array( 2 ), 1, 0 );\n* // returns <Float64Array>[ 25.0, 15.0 ]\n*/\nfunction strided( alpha, z, strideZ, offsetZ, out, strideOut, offsetOut ) {\n\tout[ offsetOut ] = alpha * z[ offsetZ ];\n\tout[ offsetOut+strideOut ] = alpha * z[ offsetZ+strideZ ];\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = strided;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Scale a double-precision complex floating-point number by a real-valued double-precision floating-point scalar constant.\n*\n* @module @stdlib/complex-float64-base-scale\n*\n* @example\n* var Complex128 = require( '@stdlib/complex-float64-ctor' );\n* var real = require( '@stdlib/complex-float64-real' );\n* var imag = require( '@stdlib/complex-float64-imag' );\n* var scale = require( '@stdlib/complex-float64-base-scale' );\n*\n* var z = new Complex128( 5.0, 3.0 );\n* // returns <Complex128>\n*\n* var out = scale( scalar, z );\n* // returns <Complex128>\n*\n* var re = real( out );\n* // returns 25.0\n*\n* var im = imag( out );\n* // returns 15.0\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar assign = require( './assign.js' );\nvar strided = require( './strided.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\nsetReadOnly( main, 'strided', strided );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"assign\": \"main.assign\", \"strided\": \"main.strided\" }\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAa,QAAS,8BAA+B,EACrDC,EAAO,QAAS,8BAA+B,EAC/CC,EAAO,QAAS,8BAA+B,EA6BnD,SAASC,EAAOC,EAAOC,EAAI,CAC1B,OAAO,IAAIL,EAAYC,EAAMI,CAAE,EAAID,EAAOF,EAAMG,CAAE,EAAID,CAAM,CAC7D,CAKAL,EAAO,QAAUI,IC5DjB,IAAAG,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAuCA,SAASC,EAAQC,EAAOC,EAAIC,EAAIC,EAAKC,EAAWC,EAAY,CAC3D,OAAAF,EAAKE,CAAU,EAAIJ,EAAKD,EACxBG,EAAKE,EAAUD,CAAU,EAAIF,EAAKF,EAC3BG,CACR,CAKAL,EAAO,QAAUC,IChDjB,IAAAO,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cA0CA,SAASC,EAASC,EAAOC,EAAGC,EAASC,EAASC,EAAKC,EAAWC,EAAY,CACzE,OAAAF,EAAKE,CAAU,EAAIN,EAAQC,EAAGE,CAAQ,EACtCC,EAAKE,EAAUD,CAAU,EAAIL,EAAQC,EAAGE,EAAQD,CAAQ,EACjDE,CACR,CAKAN,EAAO,QAAUC,ICLjB,IAAIQ,EAAc,QAAS,uDAAwD,EAC/EC,EAAO,IACPC,EAAS,IACTC,EAAU,IAKdH,EAAaC,EAAM,SAAUC,CAAO,EACpCF,EAAaC,EAAM,UAAWE,CAAQ,EAKtC,OAAO,QAAUF",
  "names": ["require_main", "__commonJSMin", "exports", "module", "Complex128", "real", "imag", "scale", "alpha", "z", "require_assign", "__commonJSMin", "exports", "module", "assign", "alpha", "re", "im", "out", "strideOut", "offsetOut", "require_strided", "__commonJSMin", "exports", "module", "strided", "alpha", "z", "strideZ", "offsetZ", "out", "strideOut", "offsetOut", "setReadOnly", "main", "assign", "strided"]
}
